/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(NICTA_BSD)
 */

/*
 * Lots of printf statements here, and with the code here, I can set my
 * laptop's built-in keyboard to scan code set 2. I had to do two things:
 * 1) run self test at the beginning of keyboard init code
 * 2) set IRQ and translation till successful (see jmintr())
 */

#include "keyboard_ps2.h"
#include "keyboard_vkey.h"
#include <stdlib.h>
#include <string.h>
#include <sel4/sel4.h>
#include <assert.h>

static void
ps2_send_keyboard_cmd(ps_io_ops_t *ops, uint8_t cmd);
static void
ps2_write_output(ps_io_ops_t *ops, uint8_t byte);


static void
ps2_single_control(ps_io_ops_t *ops, int8_t byte)
{
    ps_io_port_out(&ops->io_port_ops, PS2_IOPORT_CONTROL, 1, byte);
}
static double myflag = 1;

void mywait() {
    double d = 200.0;
    for (int i = 0; i<20000; i++) {
        d = d + 10 *2.4/3.2;
    }
    myflag = d;
}

void mywait2(int n) {
    double d = 200.0;
    for (int i = 0; i<n; i++) {
        d = d + 10 *2.4/3.2;
    }
    myflag = d;
}

UNUSED static void
ps2_dual_control(ps_io_ops_t *ops, int8_t byte1, int8_t byte2)
{
    ps_io_port_out(&ops->io_port_ops, PS2_IOPORT_CONTROL, 1, byte1);
    mywait();
    //ps_io_port_out(&ops->io_port_ops, PS2_IOPORT_DATA, 1, byte2);
    //ps2_send_keyboard_cmd(ops, byte2);
    ps2_write_output(ops, byte2);
}

static uint8_t
ps2_read_control_status(ps_io_ops_t *ops)
{
    //mywait();
    uint32_t res = 0;
    int error = ps_io_port_in(&ops->io_port_ops, PS2_IOPORT_CONTROL, 1, &res);
    printf("C=%x,",res);
    assert(!error);
    (void) error;
    return (uint8_t) res;
}

static uint8_t
ps2_read_control_status_NOPRINT(ps_io_ops_t *ops)
{
    //mywait();
    uint32_t res = 0;
    int error = ps_io_port_in(&ops->io_port_ops, PS2_IOPORT_CONTROL, 1, &res);
    assert(!error);
    (void) error;
    return (uint8_t) res;
}

static uint8_t
ps2_read_data(ps_io_ops_t *ops)
{
    uint32_t res = 0;
    int error = ps_io_port_in(&ops->io_port_ops, PS2_IOPORT_DATA, 1, &res);
    printf("D=%x,",res);
    assert(!error);
    (void) error;
    return (uint8_t) res;
}

static void
ps2_write_output(ps_io_ops_t *ops, uint8_t byte)
{
    //while ( (ps2_read_control_status(ops) & 0x2) != 0);
    int c;
    int last = -1;
    do {
        c=ps2_read_control_status_NOPRINT(ops);
        if (c != last) {
            printf("C=%x,",c);
            last = c;
        }
    }while ( (c & 0x2) != 0);
    printf("wr60=%x ",byte);
    ps_io_port_out(&ops->io_port_ops, PS2_IOPORT_DATA, 1, byte);
}

static uint8_t
ps2_read_output(ps_io_ops_t *ops)
{
    //while ( (ps2_read_control_status(ops) & 0x1) == 0);
    int c;
    int last = -1;
    do {
        c=ps2_read_control_status_NOPRINT(ops);
        if (c != last) {
            printf("C=%x,",c);
            last = c;
        }
    }while ( (c & 0x1) == 0);
    return ps2_read_data(ops);
}

void readifvalue(struct keyboard_state *state) {
    int c;
    c = ps2_read_control_status(&state->ops); //jm
    if ((c & 0x1) == 1) {
        ps2_read_output(&state->ops);
    }
}

static void
ps2_send_keyboard_cmd(ps_io_ops_t *ops, uint8_t cmd)
{
    do {
        ps2_write_output(ops, cmd);
    } while (ps2_read_output(ops) != KEYBOARD_ACK);
}

static void
ps2_send_keyboard_cmd_param(ps_io_ops_t *ops, uint8_t cmd, uint8_t param)
{
    do {
        printf("*");
        ps2_write_output(ops, cmd);
        printf("+");
        ps2_write_output(ops, param);
    } while (ps2_read_output(ops) != KEYBOARD_ACK);
}

/* ---------------------------------------------------------------------------------------------- */

UNUSED static keyboard_key_event_t
keyboard_state_push_ps2_keyevent(struct keyboard_state *s, uint16_t ps2_keyevent)
{
    keyboard_key_event_t ev_none = { .vkey = -1, .pressed = false };

    if (s->state == KEYBOARD_PS2_STATE_IGNORE) {
        s->num_ignore--;
        if (s->num_ignore == 0) {
            s->state = KEYBOARD_PS2_STATE_NORMAL;
        }
        return ev_none;
    }

    assert(s->state & KEYBOARD_PS2_STATE_NORMAL);

    /* Handle release / extended mode keys. */
    switch (ps2_keyevent) {
    case KEYBOARD_PS2_EVENTCODE_RELEASE:
        s->state |= KEYBOARD_PS2_STATE_RELEASE_KEY;
        return ev_none;
    case KEYBOARD_PS2_EVENTCODE_EXTENDED:
        s->state |= KEYBOARD_PS2_STATE_EXTENDED_MODE;
        return ev_none;
    case KEYBOARD_PS2_EVENTCODE_EXTENDED_PAUSE:
        s->state = KEYBOARD_PS2_STATE_IGNORE;
        s->num_ignore = 7; /* Ignore the next 7 characters of pause seq. */
        keyboard_key_event_t ev = { .vkey = VK_PAUSE, .pressed = true };
        return ev;
    }

    /* Prepend 0xE0 to ps2 keycode if in extended mode. */
    if (s->state & KEYBOARD_PS2_STATE_EXTENDED_MODE) {
        ps2_keyevent = 0xE000 + (ps2_keyevent & 0xFF);
        s->state &= ~KEYBOARD_PS2_STATE_EXTENDED_MODE;
    }

    int16_t vkey = keycode_ps2_to_vkey(ps2_keyevent);
    if (vkey < 0) {
        /* No associated vkey with this PS2 key. */
        s->state = KEYBOARD_PS2_STATE_NORMAL;
        return ev_none;
    }

    /* Set keystate according to press or release. */
    if (s->state & KEYBOARD_PS2_STATE_RELEASE_KEY) {
        /* Release event. */
        keyboard_key_event_t ev = { .vkey = vkey, .pressed = false };
        s->state &= ~KEYBOARD_PS2_STATE_RELEASE_KEY;
        return ev;
    }

    /* Press event. */
    keyboard_key_event_t ev = { .vkey = vkey, .pressed = true };
    return ev;
}

/* ---------------------------------------------------------------------------------------------- */

void jmreadc(struct keyboard_state *state) {
    ps2_single_control(&state->ops, PS2_READ_CMD_BYTE);
    uint8_t config = ps2_read_output(&state->ops);
    printf("CR=%x, ", config);
}

void jmintr(struct keyboard_state *state, int n) {
    int i = 0;
    int8_t config;
    int8_t config2;

    /* Enable IRQs and disable translation (IRQ bits 0, 1, translation 6). */
    printf("\nirq %d:", n);
    //Read 8042 Command Byte: current 8042 command byte is placed in port 60h.
    ps2_single_control(&state->ops, PS2_READ_CMD_BYTE);
    config = ps2_read_output(&state->ops);
    printf("bCR=%x ", config);
    config |= 0x1;
    config &= 0xBF;
    fflush(stdout);
    do {
        //Write 8042 Command Byte: next data byte written to port 60h is
        //          placed in 8042 command register.
        //ps2_dual_control(&state->ops, PS2_WRITE_CMD_BYTE, config);
        ps2_single_control(&state->ops, PS2_WRITE_CMD_BYTE);
        mywait2(i * 1000);
        ps2_write_output(&state->ops, config);

        //readifvalue(state);
        //ps2_read_data(&state->ops); //

        //reread
        mywait(i * 1000);
        ps2_single_control(&state->ops, PS2_READ_CMD_BYTE);
        config2 = ps2_read_output(&state->ops);
        printf("aCR=%x/%d ", config2,i);
        fflush(stdout);
    } while (config2 != config && i++ < 100);
    printf("*** ");
    fflush(stdout);
}


///////////
int
keyboard_init(struct keyboard_state *state, const ps_io_ops_t* ops,
              void (*handle_event_callback)(keyboard_key_event_t ev, void *cookie))
{
    assert(state && ops);
    memset(state, 0, sizeof(struct keyboard_state));

    state->state = KEYBOARD_PS2_STATE_NORMAL;
    state->ops = *ops;
    state->handle_event_callback = handle_event_callback;

    /* Initialise the PS2 keyboard device. */


    ps2_read_control_status(&state->ops); //jm
    jmreadc(state);

    /* Run a controller self test. */
    printf("t1:");
    ps2_single_control(&state->ops, PS2_CMD_CONTROLLER_SELF_TEST);
    uint8_t res = ps2_read_output(&state->ops);
    if (res != PS2_CONTROLLER_SELF_TEST_OK) {
        return -1;
    }

    /* Disable both PS2 devices. */
    ps2_read_control_status(&state->ops); //jm
    jmreadc(state);
    printf("disbl k ");
    ps2_single_control(&state->ops, PS2_CMD_DISABLE_KEYBOARD_INTERFACE);
    ps2_read_control_status(&state->ops); //jm
    jmreadc(state);
    printf("disbl m ");
    ps2_single_control(&state->ops, PS2_CMD_DISABLE_MOUSE_INTERFACE);
    ps2_read_control_status(&state->ops); //jm
    jmreadc(state);


    /* Flush the output buffer. */
    printf("fl:");
    ps2_read_data(&state->ops);
//    for (int i = 0; i< 3; i++){
//        mywait();
//        readifvalue(state);
//       // ps2_read_data(&state->ops);
//    }


////////////
jmintr(state, 1);
//ps2_write_output(&state->ops, 0xEE);
//int jmres = ps2_read_output(&state->ops);
//printf("echo=%x; ", jmres);
//jmreadc(state);
////////////
//    /* Run a controller self test. */
//    printf("t1:");
//    ps2_single_control(&state->ops, PS2_CMD_CONTROLLER_SELF_TEST);
//    uint8_t res = ps2_read_output(&state->ops);
//    if (res != PS2_CONTROLLER_SELF_TEST_OK) {
//        return -1;
//    }

    /* Run keyboard interface test. */
    jmreadc(state);
    printf("t2:");
    ps2_single_control(&state->ops, PS2_CMD_KEYBOARD_INTERFACE_TEST);
    res = ps2_read_output(&state->ops);
    if (res != 0) {
        return -1;
    }

    /* Enable keyboard interface. */
    //AE   Enable Keyboard Interface: clears Bit 4 of command register
    //     enabling keyboard interface.
    jmreadc(state);
    printf("enbl:");
    ps2_single_control(&state->ops, PS2_CMD_ENABLE_KEYBOARD_INTERFACE);
    ps2_read_data(&state->ops);    //was orig in there!!!
    jmreadc(state);
    ////////////
    //jmintr(state, 2);

    ////////////

    /* Reset the keyboard device. */
    if (keyboard_reset(state)) {
        return -1;
    }

    /* Set scanmode 2. */
    keyboard_set_scanmode(state, 2);
    printf("DONE");
    fflush(stdout);
    return 0;
}

void
keyboard_set_led(struct keyboard_state *state, char scroll_lock, char num_lock, char caps_lock)
{
    ps2_send_keyboard_cmd_param(&state->ops, KEYBOARD_SET_LEDS,
                                scroll_lock | num_lock << 1 | caps_lock << 2);
}




void
keyboard_set_scanmode(struct keyboard_state *state, uint8_t mode)
{
    ps2_send_keyboard_cmd(&state->ops, KEYBOARD_DISABLE_SCAN); /* Disable scanning. */

    ps2_read_control_status(&state->ops); //jm
    jmreadc(state);



    printf("\nsMODE ");
    ps2_send_keyboard_cmd_param(&state->ops, KEYBOARD_SET_SCANCODE_MODE, 2); /* Set scan code. */

    printf("m1 ");
    readifvalue(state);
    printf("m2 ");
    readifvalue(state);
    jmreadc(state);

    printf("\nrMODE ");
    ps2_send_keyboard_cmd_param(&state->ops, KEYBOARD_SET_SCANCODE_MODE, 0);

    printf("v1 ");
    readifvalue(state);
    printf("v2 ");
    readifvalue(state);
    printf("v3 ");
    readifvalue(state);



    printf("enabl scan ");
    ps2_send_keyboard_cmd(&state->ops, KEYBOARD_ENABLE_SCAN); /* Re-Enable scanning. */
}

int
keyboard_reset(struct keyboard_state *state)
{
    /* Reset the keyboard device. */
    printf("reset ");
    ps2_send_keyboard_cmd(&state->ops, KEYBOARD_RESET);

    /* Wait for the Basic Assurance Test. */
    while (1) {
        printf("*");
        uint8_t res = ps2_read_output(&state->ops);
        if (res == KEYBOARD_BAT_SUCCESSFUL) {
            printf("OK; ");
            break;
        }
        if (res == KEYBOARD_ERROR) {
            assert(!"keyboard init keyboard BAT failed.");
            return -1;
        }
    }

    return 0;
}

keyboard_key_event_t
keyboard_poll_ps2_keyevent(struct keyboard_state *state)
{
    if ((ps2_read_control_status_NOPRINT(&state->ops) & 0x1) == 0) {
        /* No key events generated. */
        keyboard_key_event_t ev = { .vkey = -1, .pressed = false };
        return ev;
    }
    printf("poll ");
    ps2_read_data(&state->ops);

    keyboard_key_event_t ev = { .vkey = -2, .pressed = false };
    return ev;

    //return keyboard_state_push_ps2_keyevent(state, ps2_read_data(&state->ops));
}

void
keyboard_poll_ps2_keyevents(struct keyboard_state *state, void *cookie)
{
    keyboard_key_event_t ev = { .vkey = -1, .pressed = false };
    do {
        ev = keyboard_poll_ps2_keyevent(state);
        if (ev.vkey != -1 && state->handle_event_callback) {
            state->handle_event_callback(ev, cookie);
        }
    } while (ev.vkey != -1);
}
